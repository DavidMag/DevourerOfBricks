package se.davidmagnusson.devourerofbricks.activities;

import android.app.Activity;
import android.content.Intent;
import android.graphics.Typeface;
import android.os.Bundle;
import android.support.annotation.UiThread;
import android.util.TypedValue;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;

import java.util.Random;

import se.davidmagnusson.devourerofbricks.R;
import se.davidmagnusson.devourerofbricks.databinding.LevelItemLayoutBinding;
import se.davidmagnusson.devourerofbricks.helpers.FX;
import se.davidmagnusson.devourerofbricks.helpers.FontReplacer;

/**
 * The fake loading screen that's shown before the game starts
 */
public class LoadingScreenActivity extends Activity {

    private volatile long timeAtStart;

    /**
     * The oncreate method, more or less all the things happens here
     * @param savedInstanceState auto generated by android, not used
     */
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        //Setting the layout
        setContentView(R.layout.loading_screen_layout);
        //Replacing the typeface
        FontReplacer.setAppFont((ViewGroup) findViewById(android.R.id.content).getRootView(),
                Typeface.createFromAsset(getAssets(), "fonts/EarlyGameBoy.ttf"),
                false);

        //Gets the starting time to see if the "loading" is done
        timeAtStart = System.currentTimeMillis();

        //Random used to get hint and the loading time
        Random random = new Random();

        //Sets a random Text to the hint text view
        TextView hint = (TextView) findViewById(R.id.text_hint);
        String[] hints = getResources().getStringArray(R.array.loading_screen_tips);
        hint.setText(hints[random.nextInt(hints.length)]);

        //The time the application will "load"
        final int loadingTime = random.nextInt(5) + 1;


        Thread loadingDotsThread = new Thread(new Runnable() {
            @Override
            public void run() {
                final TextView dotsView = (TextView) findViewById(R.id.text_loading_dots);
                TextAnimation dotAnimation = new TextAnimation(dotsView);

                while (timeAtStart + loadingTime * 1000 > System.currentTimeMillis()){
                    try {
                        Thread.sleep(400);
                        //Updates the view with the right amount of dots
                        runOnUiThread(dotAnimation);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }

                //When "loading" done
                runOnUiThread(new LoadingDone());
                dotAnimation.setLoaded();

                //Make the "press to play" text flashing
                while (true){
                    try {
                        runOnUiThread(dotAnimation);
                        Thread.sleep(500);
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        loadingDotsThread.start();
    }

    /**
     * Inits the FX
     */
    @Override
    protected void onResume() {
        super.onResume();
        FX.initFX(getApplicationContext());
    }

    /**
     * Stops the FX
     */
    @Override
    protected void onPause() {
        super.onPause();
        FX.releaseSound();
    }

    /**
     * Runnable class that handle the text animation
     */
    private class TextAnimation implements Runnable{

        private TextView textView;
        private byte dots;
        private boolean loaded;

        /**
         * The class constructor, initials the class variables
         * @param textView the TextView that will be animated
         */
        TextAnimation(TextView textView){
            this.textView = textView;
            dots = 1;
            this.loaded = false;
        }

        /**
         * Tells the animation that's loaded and should change animation and
         * sets the text view to a smaller text size
         */
        void setLoaded(){
            this.loaded = true;
        }

        /**
         * The animation method, containts two different animation depending on
         * if the loaded boolean is set to true or not
         */
        @Override
        public void run() {
            if (!loaded) {
                String str = "";
                byte idx = 0;

                if (++dots > 3) {
                    dots = 1;
                }

                while (idx++ < dots) {
                    str += " .";
                }
                textView.setText(str);
            } else {
                if (textView.getText().length() > 0){
                    textView.setText("");
                } else {
                    textView.setText(R.string.loading_screen_press_to_play);
                }
            }
        }
    }

    /**
     * Another Runnable class that sets a on click listener on the root element in the layout
     * that sends a intent that starts the game
     */
    private class LoadingDone implements Runnable {

        /**
         * The method that sets the on click listener to the root element of the layout
         */
        @Override
        public void run() {
            TextView tv = (TextView) findViewById(R.id.text_loading_dots);
            tv.setTextSize(TypedValue.COMPLEX_UNIT_SP, 18);

            View view = findViewById(R.id.root_view);
            view.setClickable(true);
            view.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    FX.play(FX.pressStart, 1, 1, 0, 0, 1);
                    Intent intent = new Intent(getApplicationContext(), GameActivity.class);
                    intent.putExtra("level", getIntent().getByteExtra("level", (byte) 1));
                    startActivity(intent);
                    finish();
                }
            });
        }
    }
}
